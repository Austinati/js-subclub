{"version":3,"file":"index.umd.min.js","sources":["../src/client.ts"],"sourcesContent":["import type {\n  Post,\n  PostDeleteParams,\n  PostParams,\n  PostUpdateParams,\n} from './post';\n\nexport class Client {\n  private readonly apiUrl = 'https://api.sub.club/public';\n  private readonly apiKey: string;\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n\n  // creates a new post on sub.club with the given parameters.\n  async createPost(params: PostParams): Promise<Post> {\n    const response = await fetch(`${this.apiUrl}/post`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify(params),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to create post: ${response.statusText}`);\n    }\n\n    return response.json() as Promise<Post>;\n  }\n\n  // edits the given post with the supplied PostUpdateParams.\n  async editPost(params: PostUpdateParams): Promise<Post> {\n    const response = await fetch(`${this.apiUrl}/post/edit`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify(params),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to edit post: ${response.statusText}`);\n    }\n\n    return response.json() as Promise<Post>;\n  }\n\n  // deletes a post with the given postID.\n  async deletePost(params: PostDeleteParams): Promise<void> {\n    const response = await fetch(`${this.apiUrl}/post/delete`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify(params),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to delete post: ${response.statusText}`);\n    }\n\n    return;\n  }\n}\n\nexport default Client;\n"],"names":["constructor","apiKey","this","apiUrl","createPost","params","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","Error","statusText","json","editPost","deletePost"],"mappings":";;;;;+oBAWE,WAAAA,CAAYC,GAHKC,KAAMC,OAAG,8BAIxBD,KAAKD,OAASA,CACf,CAGK,UAAAG,CAAWC,4CACf,MAAMC,QAAiBC,MAAM,GAAGL,KAAKC,cAAe,CAClDK,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAiB,UAAUR,KAAKD,UAElCU,KAAMC,KAAKC,UAAUR,KAGvB,IAAKC,EAASQ,GACZ,MAAM,IAAIC,MAAM,0BAA0BT,EAASU,cAGrD,OAAOV,EAASW,SACjB,CAGK,QAAAC,CAASb,4CACb,MAAMC,QAAiBC,MAAM,GAAGL,KAAKC,mBAAoB,CACvDK,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChBC,cAAiB,UAAUR,KAAKD,UAElCU,KAAMC,KAAKC,UAAUR,KAGvB,IAAKC,EAASQ,GACZ,MAAM,IAAIC,MAAM,wBAAwBT,EAASU,cAGnD,OAAOV,EAASW,SACjB,CAGK,UAAAE,CAAWd,4CACf,MAAMC,QAAiBC,MAAM,GAAGL,KAAKC,qBAAsB,CACzDK,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChBC,cAAiB,UAAUR,KAAKD,UAElCU,KAAMC,KAAKC,UAAUR,KAGvB,IAAKC,EAASQ,GACZ,MAAM,IAAIC,MAAM,0BAA0BT,EAASU,gBAItD"}